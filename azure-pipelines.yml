variables:
  acr: ytnetworks.azurecr.io
  image: ytnetworks
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    env: prod
  ${{ if ne( variables['Build.SourceBranchName'], 'master') }}:
    env: stage
    

stages:
- stage: App
  jobs:
  - job: Docker
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
          echo GitVersion
          dotnet tool restore
          dotnet dotnet-gitversion /output buildserver /nofetch
      failOnStderr: true
      workingDirectory: ./App

    - task: Docker@2
      displayName: YtCli Docker Build
      inputs:
        command: build
        containerRegistry: ytnetworks
        repository: $(image)
        tags: $(GitVersion.SemVer)
        arguments: --build-arg SEMVER=$(GitVersion.SemVer) --build-arg ASSEMBLY_SEMVER=$(GitVersion.AssemblySemVer)
        buildContext: ./App

    - task: Docker@2
      displayName: YtCli Docker Push
      inputs:
        command: push
        containerRegistry: ytnetworks
        repository: $(image)
        tags: $(GitVersion.SemVer)

  - job: App
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
          echo GitVersion
          dotnet tool restore
          dotnet dotnet-gitversion /output buildserver /nofetch
      failOnStderr: true
      workingDirectory: ./App

    - script: dotnet publish -c Release  --output $(Build.ArtifactStagingDirectory)/YtFunctions /p:Version='$(GitVersion.AssemblySemVer)' /p:InformationalVersion='$(GitVersion.SemVer)'
      workingDirectory: ./App/YtFunctions
      displayName: Publish YtFunctions

    - task: PublishBuildArtifacts@1
      displayName: Pubish YtFunctions Artifact
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/YtFunctions
          artifactName: YtFunctions
